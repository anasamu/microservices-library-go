name: Test and Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: |
        find . -name "go.mod" -exec dirname {} \; | sort -u | while read -r dir; do
          echo "Downloading dependencies for $dir"
          (cd "$dir" && go mod download)
        done
    
    - name: Run tests
      run: |
        find . -name "*_test.go" -exec dirname {} \; | sort -u | while read -r dir; do
          echo "Running tests in $dir"
          (cd "$dir" && go test -v -race -coverprofile=coverage.out ./...)
        done
    
    - name: Run go vet
      run: |
        find . -name "*.go" -not -path "./vendor/*" -exec dirname {} \; | sort -u | while read -r dir; do
          echo "Running go vet in $dir"
          (cd "$dir" && go vet ./...)
        done
    
    - name: Run go fmt check
      run: |
        find . -name "*.go" -not -path "./vendor/*" -exec dirname {} \; | sort -u | while read -r dir; do
          echo "Checking formatting in $dir"
          (cd "$dir" && test -z "$(gofmt -l .)")
        done
    
    - name: Build all modules
      run: |
        find . -name "go.mod" -exec dirname {} \; | sort -u | while read -r dir; do
          echo "Building $dir"
          (cd "$dir" && go build ./...)
        done

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: gosec.sarif
