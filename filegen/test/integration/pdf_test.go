package integration

import (
	"context"
	"os"
	"testing"

	pdfProvider "github.com/anasamu/microservices-library-go/filegen/providers/pdf"
)

func TestPDFProvider(t *testing.T) {
	// Create temporary directory for templates
	tmpDir := t.TempDir()

	config := &pdfProvider.Config{
		TemplatePath: tmpDir,
		DefaultFont:  "Calibri",
		DefaultSize:  11,
		PageSize:     "A4",
	}

	provider, err := pdfProvider.NewProvider(config)
	if err != nil {
		t.Fatalf("Failed to create PDF provider: %v", err)
	}
	defer provider.Close()

	ctx := context.Background()

	t.Run("GenerateSimplePDF", func(t *testing.T) {
		req := &pdfProvider.FileRequest{
			Type: "pdf",
			Data: map[string]interface{}{
				"title": "Test PDF Document",
				"content": []map[string]interface{}{
					{
						"type":  "heading",
						"text":  "Introduction",
						"level": 1,
					},
					{
						"type": "paragraph",
						"text": "This is a test PDF document generated by the PDF provider.",
					},
					{
						"type":    "table",
						"headers": []string{"Name", "Age", "City"},
						"rows": [][]string{
							{"John Doe", "30", "New York"},
							{"Jane Smith", "25", "Los Angeles"},
						},
					},
				},
			},
		}

		response, err := provider.GenerateFile(ctx, req)
		if err != nil {
			t.Fatalf("Failed to generate PDF file: %v", err)
		}

		if !response.Success {
			t.Fatalf("File generation failed: %s", response.Error)
		}

		if len(response.Content) == 0 {
			t.Fatal("Generated content is empty")
		}

		if response.MimeType != "application/pdf" {
			t.Errorf("Expected MIME type 'application/pdf', got '%s'", response.MimeType)
		}
	})

	t.Run("GeneratePDFWithMetadata", func(t *testing.T) {
		req := &pdfProvider.FileRequest{
			Type: "pdf",
			Data: map[string]interface{}{
				"title": "Test PDF with Metadata",
				"metadata": map[string]interface{}{
					"title":       "Test Document",
					"author":      "Test Author",
					"subject":     "Test Subject",
					"keywords":    "test, pdf, generation",
					"description": "A test PDF document",
				},
				"content": []map[string]interface{}{
					{
						"type": "paragraph",
						"text": "This PDF includes metadata information.",
					},
				},
			},
		}

		response, err := provider.GenerateFile(ctx, req)
		if err != nil {
			t.Fatalf("Failed to generate PDF with metadata: %v", err)
		}

		if !response.Success {
			t.Fatalf("File generation failed: %s", response.Error)
		}

		if len(response.Content) == 0 {
			t.Fatal("Generated content is empty")
		}
	})

	t.Run("GeneratePDFWithList", func(t *testing.T) {
		req := &pdfProvider.FileRequest{
			Type: "pdf",
			Data: map[string]interface{}{
				"title": "Test PDF with List",
				"content": []map[string]interface{}{
					{
						"type":  "heading",
						"text":  "Features",
						"level": 1,
					},
					{
						"type":      "list",
						"list_type": "bullet",
						"items": []string{
							"Feature 1",
							"Feature 2",
							"Feature 3",
						},
					},
				},
			},
		}

		response, err := provider.GenerateFile(ctx, req)
		if err != nil {
			t.Fatalf("Failed to generate PDF with list: %v", err)
		}

		if !response.Success {
			t.Fatalf("File generation failed: %s", response.Error)
		}

		if len(response.Content) == 0 {
			t.Fatal("Generated content is empty")
		}
	})

	t.Run("ValidateRequest", func(t *testing.T) {
		// Test valid request
		req := &pdfProvider.FileRequest{
			Type: "pdf",
			Data: map[string]interface{}{"test": "data"},
		}

		if err := provider.ValidateRequest(req); err != nil {
			t.Errorf("Valid request should not fail validation: %v", err)
		}

		// Test invalid file type
		req.Type = "invalid"
		if err := provider.ValidateRequest(req); err == nil {
			t.Error("Invalid file type should fail validation")
		}

		// Test missing data
		req.Type = "pdf"
		req.Data = nil
		if err := provider.ValidateRequest(req); err == nil {
			t.Error("Missing data should fail validation")
		}
	})

	t.Run("GetSupportedTypes", func(t *testing.T) {
		types := provider.GetSupportedTypes()
		if len(types) != 1 || types[0] != "pdf" {
			t.Errorf("Expected supported types ['pdf'], got %v", types)
		}
	})

	t.Run("GetTemplateList", func(t *testing.T) {
		templates, err := provider.GetTemplateList()
		if err != nil {
			t.Errorf("Failed to get template list: %v", err)
		}

		// Should be empty since no templates were loaded
		if len(templates) != 0 {
			t.Errorf("Expected empty template list, got %v", templates)
		}
	})
}

func TestPDFProviderWithWriter(t *testing.T) {
	config := &pdfProvider.Config{
		TemplatePath: t.TempDir(),
	}

	provider, err := pdfProvider.NewProvider(config)
	if err != nil {
		t.Fatalf("Failed to create PDF provider: %v", err)
	}
	defer provider.Close()

	ctx := context.Background()

	req := &pdfProvider.FileRequest{
		Type: "pdf",
		Data: map[string]interface{}{
			"title": "Test PDF Document",
			"text":  "This is a simple test PDF document.",
		},
	}

	// Create temporary file
	tmpFile, err := os.CreateTemp("", "test_*.pdf")
	if err != nil {
		t.Fatalf("Failed to create temp file: %v", err)
	}
	defer os.Remove(tmpFile.Name())
	defer tmpFile.Close()

	// Generate file to writer
	err = provider.GenerateFileToWriter(ctx, req, tmpFile)
	if err != nil {
		t.Fatalf("Failed to generate file to writer: %v", err)
	}

	// Check if file was written
	info, err := tmpFile.Stat()
	if err != nil {
		t.Fatalf("Failed to get file info: %v", err)
	}

	if info.Size() == 0 {
		t.Fatal("Generated file is empty")
	}
}
